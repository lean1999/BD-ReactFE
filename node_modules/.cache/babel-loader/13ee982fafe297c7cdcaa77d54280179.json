{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anlnd\\\\Documents\\\\GitHub\\\\BookingDoctor\\\\ReactFE\\\\src\\\\containers\\\\System\\\\Doctor\\\\ManageSchedule.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./ManageSchedule.scss\";\nimport Select from \"react-select\";\nimport { FormattedMessage } from \"react-intl\";\nimport * as actions from \"../../../store/actions\";\nimport { LANGUAGES, CRUD_ACTIONS, dateFormat } from \"../../../utils\";\nimport DatePicker from \"../../../components/Input/DatePicker\";\nimport moment from \"moment\";\nimport FormattedDate from \"../../../components/Formating/FormattedDate\";\nimport { toast } from \"react-toastify\";\nimport _ from \"lodash\";\nimport { saveBulkScheduleDoctor } from \"../../../services/userService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ManageSchedule extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buildDataInputSelect = inputData => {\n      let result = [];\n      let language = this.props.language;\n\n      if (inputData && inputData.length > 0) {\n        inputData.map((item, index) => {\n          let object = {};\n          let labelVi = ` ${item.lastName} ${item.firstName}`;\n          let labelEn = ` ${item.firstName} ${item.lastName}`;\n          object.label = language === LANGUAGES.VI ? labelVi : labelEn;\n          object.value = item.id;\n          result.push(object);\n        });\n      }\n\n      return result;\n    };\n\n    this.handleChangeSelect = async selectedOption => {\n      this.setState({\n        selectedDoctor: selectedOption\n      });\n    };\n\n    this.handleChangeDate = date => {\n      this.setState({\n        currentDate: date[0]\n      });\n    };\n\n    this.handleClickBtnTime = time => {\n      let {\n        rangeTime\n      } = this.state;\n\n      if (rangeTime && rangeTime.length > 0) {\n        rangeTime = rangeTime.map(item => {\n          if (item.id === time.id) item.isSelected = !item.isSelected;\n          return item;\n        });\n        this.setState({\n          rangeTime: rangeTime\n        });\n      }\n    };\n\n    this.handleSaveSchedule = async () => {\n      let {\n        rangeTime,\n        currentDate,\n        selectedDoctor,\n        isSelected\n      } = this.state;\n      console.log(\"ressss\", rangeTime);\n      let result = [];\n      this.setState({\n        rangeTime: rangeTime,\n        selectedDoctor: false,\n        isSelected: false\n      });\n\n      if (selectedDoctor && _.isEmpty(selectedDoctor)) {\n        toast.error(\"Select DocTor Required\");\n        return;\n      }\n\n      if (!currentDate) {\n        toast.error(\"Date Required\");\n        return;\n      } // let formattedDate = moment(currentDate).unix();\n\n\n      let formattedDate = new Date(currentDate).getTime();\n\n      if (rangeTime && rangeTime.length > 0) {\n        let selectedTime = rangeTime.filter(item => item.isSelected === true);\n\n        if (selectedTime && selectedTime.length > 0) {\n          selectedTime.map((schedule, index) => {\n            let object = {};\n            object.doctorId = selectedDoctor.value;\n            object.date = formattedDate;\n            object.timeType = schedule.keyMap;\n            result.push(object);\n          });\n        } else {\n          toast.error(\"Select Time\");\n          return;\n        }\n      }\n\n      let res = await saveBulkScheduleDoctor({\n        arrSchedule: result,\n        doctorId: selectedDoctor.value,\n        formattedDate: formattedDate\n      });\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Success\");\n      } else {\n        toast.error(\"Error\");\n      }\n    };\n\n    this.state = {\n      listDoctor: [],\n      selectedDoctor: {},\n      currentDate: new Date(),\n      rangeTime: [],\n      isSelected: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllDoctorsRedux();\n    this.props.fetchAllScheduleTime();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.allDoctors !== this.props.allDoctors) {\n      let dataSelect = this.buildDataInputSelect(this.props.allDoctors);\n      this.setState({\n        listDoctor: dataSelect\n      });\n    }\n\n    if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\n      let data = this.props.allScheduleTime;\n\n      if (data && data.length > 0) {\n        data = data.map(item => ({ ...item,\n          isSelected: false\n        }));\n      }\n\n      console.log(data);\n      this.setState({\n        rangeTime: data\n      });\n    }\n  }\n\n  render() {\n    let {\n      rangeTime\n    } = this.state;\n    let {\n      language\n    } = this.props;\n    let yesterday = new Date(new Date().setHours(0, 0, 0, 0));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manage-schedule-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-s-title\",\n          children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n            id: \"manage-schedule.title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-6 form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                  id: \"manage-schedule.chooseDoctor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: this.state.selectedDoctor,\n                onChange: this.handleChangeSelect,\n                options: this.state.listDoctor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-6 form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\" \", /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                  id: \"manage-schedule.chooseDate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 19\n                }, this), \"_\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                onChange: this.handleChangeDate,\n                className: \"form-control\",\n                value: this.state.currentDate,\n                minDate: yesterday\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12 pick-hour-container\",\n              children: rangeTime && rangeTime.length > 0 && rangeTime.map((item, index) => {\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: item.isSelected === true ? \"btn btn-schedule active\" : \"btn btn-schedule\",\n                  onClick: () => this.handleClickBtnTime(item),\n                  children: language === LANGUAGES.VI ? item.valueVi : item.valueEn\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: () => this.handleSaveSchedule(),\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"manage-schedule.save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoggedIn: state.user.isLoggedIn,\n    allDoctors: state.admin.allDoctors,\n    language: state.app.language,\n    allScheduleTime: state.admin.allScheduleTime\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllDoctorsRedux: () => dispatch(actions.fetchAllDoctors()),\n    fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);","map":{"version":3,"sources":["C:/Users/anlnd/Documents/GitHub/BookingDoctor/ReactFE/src/containers/System/Doctor/ManageSchedule.js"],"names":["React","Component","connect","Select","FormattedMessage","actions","LANGUAGES","CRUD_ACTIONS","dateFormat","DatePicker","moment","FormattedDate","toast","_","saveBulkScheduleDoctor","ManageSchedule","constructor","props","buildDataInputSelect","inputData","result","language","length","map","item","index","object","labelVi","lastName","firstName","labelEn","label","VI","value","id","push","handleChangeSelect","selectedOption","setState","selectedDoctor","handleChangeDate","date","currentDate","handleClickBtnTime","time","rangeTime","state","isSelected","handleSaveSchedule","console","log","isEmpty","error","formattedDate","Date","getTime","selectedTime","filter","schedule","doctorId","timeType","keyMap","res","arrSchedule","errCode","success","listDoctor","componentDidMount","fetchAllDoctorsRedux","fetchAllScheduleTime","componentDidUpdate","prevProps","prevState","snapshot","allDoctors","dataSelect","allScheduleTime","data","render","yesterday","setHours","valueVi","valueEn","mapStateToProps","isLoggedIn","user","admin","app","mapDispatchToProps","dispatch","fetchAllDoctors"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./ManageSchedule.scss\";\r\nimport Select from \"react-select\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { LANGUAGES, CRUD_ACTIONS, dateFormat } from \"../../../utils\";\r\nimport DatePicker from \"../../../components/Input/DatePicker\";\r\nimport moment from \"moment\";\r\nimport FormattedDate from \"../../../components/Formating/FormattedDate\";\r\nimport { toast } from \"react-toastify\";\r\nimport _ from \"lodash\";\r\nimport { saveBulkScheduleDoctor } from \"../../../services/userService\";\r\nclass ManageSchedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listDoctor: [],\r\n      selectedDoctor: {},\r\n      currentDate: new Date(),\r\n      rangeTime: [],\r\n      isSelected:false\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchAllDoctorsRedux();\r\n    this.props.fetchAllScheduleTime();\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allDoctors !== this.props.allDoctors) {\r\n      let dataSelect = this.buildDataInputSelect(this.props.allDoctors);\r\n      this.setState({\r\n        listDoctor: dataSelect,\r\n      });\r\n    }\r\n    if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n      let data = this.props.allScheduleTime;\r\n      if (data && data.length > 0) {\r\n        data = data.map((item) => ({ ...item, isSelected: false }));\r\n      }\r\n      console.log(data);\r\n      this.setState({\r\n        rangeTime: data,\r\n      });\r\n    }\r\n  }\r\n  buildDataInputSelect = (inputData) => {\r\n    let result = [];\r\n    let language = this.props.language;\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        let object = {};\r\n        let labelVi = ` ${item.lastName} ${item.firstName}`;\r\n        let labelEn = ` ${item.firstName} ${item.lastName}`;\r\n        object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n        object.value = item.id;\r\n        result.push(object);\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n  handleChangeSelect = async (selectedOption) => {\r\n    this.setState({ selectedDoctor: selectedOption });\r\n  };\r\n  handleChangeDate = (date) => {\r\n    this.setState({\r\n      currentDate: date[0],\r\n    });\r\n  };\r\n  handleClickBtnTime = (time) => {\r\n    let { rangeTime } = this.state;\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      rangeTime = rangeTime.map((item) => {\r\n        if (item.id === time.id) item.isSelected = !item.isSelected;\r\n        return item;\r\n      });\r\n      this.setState({\r\n        rangeTime: rangeTime,\r\n      });\r\n    }\r\n  };\r\n  handleSaveSchedule = async () => {\r\n    let { rangeTime, currentDate, selectedDoctor,isSelected } = this.state;\r\n    console.log(\"ressss\",rangeTime)\r\n    let result = [];\r\n    this.setState({\r\n      rangeTime: rangeTime,\r\n      selectedDoctor:false,\r\n      isSelected:false\r\n    });\r\n    if (selectedDoctor && _.isEmpty(selectedDoctor)) {\r\n      toast.error(\"Select DocTor Required\");\r\n      return;\r\n    }\r\n    if (!currentDate) {\r\n      toast.error(\"Date Required\");\r\n      return;\r\n    }\r\n\r\n\r\n    // let formattedDate = moment(currentDate).unix();\r\n    let formattedDate = new Date(currentDate).getTime();\r\n\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      let selectedTime = rangeTime.filter((item) => item.isSelected === true);\r\n      if (selectedTime && selectedTime.length > 0) {\r\n        selectedTime.map((schedule, index) => {\r\n          let object = {};\r\n          object.doctorId = selectedDoctor.value;\r\n          object.date = formattedDate;\r\n          object.timeType = schedule.keyMap;\r\n          result.push(object);\r\n        });\r\n      } else {\r\n        toast.error(\"Select Time\");\r\n        return;\r\n      }\r\n    }\r\n    let res = await saveBulkScheduleDoctor({\r\n      arrSchedule: result,\r\n      doctorId: selectedDoctor.value,\r\n      formattedDate: formattedDate,\r\n    });\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Success\");\r\n    } else {\r\n      toast.error(\"Error\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { rangeTime } = this.state;\r\n    let { language } = this.props;\r\n    let yesterday = new Date(new Date().setHours(0, 0, 0, 0));\r\n    return (\r\n      <>\r\n        <div className=\"manage-schedule-container\">\r\n          <div className=\"m-s-title\">\r\n            <FormattedMessage id=\"manage-schedule.title\" />\r\n          </div>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-6 form-group\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-schedule.chooseDoctor\" />\r\n                </label>\r\n                <Select\r\n                  value={this.state.selectedDoctor}\r\n                  onChange={this.handleChangeSelect}\r\n                  options={this.state.listDoctor}\r\n                />\r\n              </div>\r\n              <div className=\"col-6 form-group\">\r\n                <label>\r\n                  {\" \"}\r\n                  <FormattedMessage id=\"manage-schedule.chooseDate\" />_\r\n                </label>\r\n                <DatePicker\r\n                  onChange={this.handleChangeDate}\r\n                  className=\"form-control\"\r\n                  value={this.state.currentDate}\r\n                  minDate={yesterday}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 pick-hour-container\">\r\n                {rangeTime &&\r\n                  rangeTime.length > 0 &&\r\n                  rangeTime.map((item, index) => {\r\n                    return (\r\n                      <button\r\n                        className={\r\n                          item.isSelected === true\r\n                            ? \"btn btn-schedule active\"\r\n                            : \"btn btn-schedule\"\r\n                        }\r\n                        key={index}\r\n                        onClick={() => this.handleClickBtnTime(item)}\r\n                      >\r\n                        {language === LANGUAGES.VI\r\n                          ? item.valueVi\r\n                          : item.valueEn}\r\n                      </button>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </div>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleSaveSchedule()}\r\n            >\r\n              <FormattedMessage id=\"manage-schedule.save\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    allDoctors: state.admin.allDoctors,\r\n    language: state.app.language,\r\n    allScheduleTime: state.admin.allScheduleTime,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllDoctorsRedux: () => dispatch(actions.fetchAllDoctors()),\r\n    fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n"]},"metadata":{},"sourceType":"module"}