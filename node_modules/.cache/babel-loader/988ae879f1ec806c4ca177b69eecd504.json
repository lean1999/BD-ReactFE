{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anlnd\\\\Documents\\\\GitHub\\\\BookingDoctor\\\\reactFE\\\\src\\\\containers\\\\System\\\\ModelEditUser.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModelEditUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.props.toggleUserModal();\n    };\n\n    this.handleOnChangeInput = (event, id) => {\n      let copyState = { ...this.state\n      };\n      copyState[id] = event.target.value;\n      this.setState({ ...copyState\n      });\n    };\n\n    this.checkValidInput = () => {\n      let isValid = true;\n      let arrInput = [\"email\", \"password\", \"firstName\", \"lastName\", \"address\", \"phoneNumber\"];\n\n      for (let i = 0; i < arrInput.length; i++) {\n        if (!this.state[arrInput[i]]) {\n          isValid = false;\n          alert(\"Missing for:\" + arrInput[i]);\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.handleEditUser = () => {\n      let isValid = this.checkValidInput();\n\n      if (isValid === true) {\n        //call API\n        this.props.editUser(this.state);\n      }\n    };\n\n    this.state = {\n      id: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      phoneNumber: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let user = this.props.currentUser;\n    console.log(user, \"djask\");\n\n    if (user && !_.isEmpty(user)) {\n      this.setState({\n        id: user.id,\n        email: user.email,\n        password: \"hash\",\n        firstName: user.firstName,\n        lastName: user.lastName,\n        address: user.address,\n        phoneNumber: user.phoneNumber\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: this.props.isOpen,\n      toggle: () => this.toggle(),\n      className: \"modal-user-container\",\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: () => this.toggle(),\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-user-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              disabled: true,\n              type: \"email\",\n              placeholder: \"Email\",\n              value: this.state.email,\n              onChange: event => {\n                this.handleOnChangeInput(event, \"email\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              disabled: true,\n              type: \"password\",\n              placeholder: \"Password\",\n              value: this.state.password,\n              onChange: event => {\n                this.handleOnChangeInput(event, \"password\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-user-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"FirstName\",\n              value: this.state.firstName,\n              onChange: event => {\n                this.handleOnChangeInput(event, \"firstName\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"LastName\",\n              value: this.state.lastName,\n              onChange: event => {\n                this.handleOnChangeInput(event, \"lastName\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-user-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Address\",\n              value: this.state.address,\n              onChange: event => {\n                this.handleOnChangeInput(event, \"address\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Phone Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.phoneNumber,\n              placeholder: \"SDT\",\n              onChange: event => {\n                this.handleOnChangeInput(event, \"phoneNumber\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: \"orange\"\n          },\n          className: \"px-3\",\n          onClick: () => this.handleEditUser(),\n          children: \"Saves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          className: \"px-3\",\n          onClick: () => this.toggle(),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModelEditUser);","map":{"version":3,"sources":["C:/Users/anlnd/Documents/GitHub/BookingDoctor/reactFE/src/containers/System/ModelEditUser.js"],"names":["React","Component","connect","Button","Modal","ModalHeader","ModalBody","ModalFooter","_","ModelEditUser","constructor","props","toggle","toggleUserModal","handleOnChangeInput","event","id","copyState","state","target","value","setState","checkValidInput","isValid","arrInput","i","length","alert","handleEditUser","editUser","email","password","firstName","lastName","address","phoneNumber","componentDidMount","user","currentUser","console","log","isEmpty","render","isOpen","backgroundColor","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport _ from \"lodash\";\r\nclass ModelEditUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      address: \"\",\r\n      phoneNumber: \"\",\r\n    };\r\n  }\r\n  toggle = () => {\r\n    this.props.toggleUserModal();\r\n  };\r\n\r\n  componentDidMount() {\r\n    let user = this.props.currentUser;\r\n    console.log(user, \"djask\");\r\n    if (user && !_.isEmpty(user)) {\r\n      this.setState({\r\n        id: user.id,\r\n        email: user.email,\r\n        password: \"hash\",\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        address: user.address,\r\n        phoneNumber: user.phoneNumber,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n  checkValidInput = () => {\r\n    let isValid = true;\r\n    let arrInput = [\r\n      \"email\",\r\n      \"password\",\r\n      \"firstName\",\r\n      \"lastName\",\r\n      \"address\",\r\n      \"phoneNumber\",\r\n    ];\r\n    for (let i = 0; i < arrInput.length; i++) {\r\n      if (!this.state[arrInput[i]]) {\r\n        isValid = false;\r\n        alert(\"Missing for:\" + arrInput[i]);\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n  handleEditUser = () => {\r\n    let isValid = this.checkValidInput();\r\n    if (isValid === true) {\r\n      //call API\r\n      this.props.editUser(this.state);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.props.isOpen}\r\n        toggle={() => this.toggle()}\r\n        className={\"modal-user-container\"}\r\n        size=\"lg\"\r\n      >\r\n        <ModalHeader toggle={() => this.toggle()}>Edit User</ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"modal-user-body\">\r\n            <div className=\"input-container\">\r\n              <label>Email</label>\r\n              <input\r\n                disabled\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                value={this.state.email}\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"email\");\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"input-container\">\r\n              <label>Password</label>\r\n              <input\r\n                disabled\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={this.state.password}\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"password\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-user-body\">\r\n            <div className=\"input-container\">\r\n              <label>First Name</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"FirstName\"\r\n                value={this.state.firstName}\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"firstName\");\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"input-container\">\r\n              <label>Last Name</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"LastName\"\r\n                value={this.state.lastName}\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"lastName\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-user-body\">\r\n            <div className=\"input-container\">\r\n              <label>Address</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Address\"\r\n                value={this.state.address}\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"address\");\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"input-container\">\r\n              <label>Phone Number</label>\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.phoneNumber}\r\n                placeholder=\"SDT\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"phoneNumber\");\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            style={{ backgroundColor: \"orange\" }}\r\n            className=\"px-3\"\r\n            onClick={() => this.handleEditUser()}\r\n          >\r\n            Saves\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"px-3\"\r\n            onClick={() => this.toggle()}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModelEditUser);\r\n"]},"metadata":{},"sourceType":"module"}