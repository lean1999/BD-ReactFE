{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nimport { getAllCodeService, createNewUserService, getAllUsers, editUserService, deleteUserService, getTopDoctorHomeService, getAllDoctors, saveDetailDoctorService, getAllSpecialty, getAllClinic } from \"../../services/userService\";\nimport { toast } from \"react-toastify\"; // export const fetchGenderStart = () => ({\n//   type: actionTypes.FETCH_GENDER_START,\n// });\n\nexport const fetchAllScheduleTime = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"TIME\");\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.SAVE_ALL_SCHEDULE_TIME_SUCCESS,\n          dataTime: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.SAVE_ALL_SCHEDULE_TIME_FAILED\n        });\n        console.log(\"SAVE_ALL_SCHEDULE_TIME_FAILED\");\n      }\n    } catch (e) {\n      console.log(\"SAVE_ALL_SCHEDULE_TIME_FAILED\", e);\n      dispatch({\n        type: actionTypes.SAVE_ALL_SCHEDULE_TIME_FAILED\n      });\n    }\n  };\n};\nexport const saveDetailDoctor = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await saveDetailDoctorService(data);\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS\n        });\n        toast.success(\"Save Info Doctor Success\");\n      } else {\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED\n        });\n        toast.error(\"SAVE_ALL_SCHEDULE_TIME__FAILED\");\n      }\n    } catch (e) {\n      console.log(\"fetchTopDoctorFailed\", e);\n      dispatch({\n        type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED\n      });\n      toast.error(\"SAVE_ALL_SCHEDULE_TIME__FAILED\");\n    }\n  };\n};\nexport const fetchTopDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getTopDoctorHomeService(\"\");\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\n          dataDoctor: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"fetchTopDoctorFailed\", e);\n      dispatch({\n        type: actionTypes.FETCH_TOP_DOCTOR_FAILED\n      });\n    }\n  };\n};\nexport const fetchTopDoctorSuccess = () => ({\n  type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS\n});\nexport const fetchTopDoctorFailed = () => ({\n  type: actionTypes.FETCH_TOP_DOCTOR_FAILED\n});\nexport const fetchAllDoctors = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllDoctors();\n\n      if (res && res.err === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\n          dataDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"fetchALLDoctorFailed\", e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_DOCTOR_FAILED\n      });\n    }\n  };\n}; //Gender\n\nexport const fetchGenderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_GENDER_START\n      });\n      let res = await getAllCodeService(\"GENDER\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchGenderSuccess(res.data));\n      } else {\n        dispatch(fetchGenderFailed());\n      }\n    } catch (e) {\n      console.log(\"err gender\", e);\n      dispatch(fetchGenderFailed());\n    }\n  };\n};\nexport const fetchGenderSuccess = genderData => ({\n  type: actionTypes.FETCH_GENDER_SUCCESS,\n  data: genderData\n});\nexport const fetchGenderFailed = () => ({\n  type: actionTypes.FETCH_GENDER_FAILED\n});\nexport const getRequiredDoctorInfo = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_START\n      });\n      let resPrice = await getAllCodeService(\"PRICE\");\n      let resPayment = await getAllCodeService(\"PAYMENT\");\n      let resProvince = await getAllCodeService(\"PROVINCE\");\n      let resSpecialty = await getAllSpecialty();\n      let resClinic = await getAllClinic();\n\n      if (resPrice && resPrice.errCode === 0 && resPayment && resPayment.errCode === 0 && resProvince && resProvince.errCode === 0 && resSpecialty && resSpecialty.errCode === 0 && resClinic && resClinic.errCode === 0) {\n        let data = {\n          resPrice: resPrice.data,\n          resPayment: resPayment.data,\n          resProvince: resProvince.data,\n          resSpecialty: resSpecialty.data,\n          resClinic: resClinic.data\n        };\n        dispatch(fetchRequiredDoctorInfoSuccess(data));\n      } else {\n        dispatch(fetchRequiredDoctorInfoFailed());\n      }\n    } catch (e) {\n      console.log(\"err gender\", e);\n      dispatch(fetchRequiredDoctorInfoFailed());\n    }\n  };\n};\nexport const fetchRequiredDoctorInfoSuccess = allRequiredData => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_SUCCESS,\n  data: allRequiredData\n});\nexport const fetchRequiredDoctorInfoFailed = () => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_FAILED\n}); //Position\n\nexport const fetchPositionSuccess = positionData => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS,\n  data: positionData\n});\nexport const fetchPositionFailed = () => ({\n  type: actionTypes.FETCH_POSITION_FAILED\n});\nexport const fetchRoleSuccess = roleData => ({\n  type: actionTypes.FETCH_ROLE_SUCCESS,\n  data: roleData\n});\nexport const fetchRoleFailed = () => ({\n  type: actionTypes.FETCH_ROLE_FAILED\n});\nexport const fetchPositionStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"POSITION\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchPositionSuccess(res.data));\n      } else {\n        dispatch(fetchPositionFailed());\n      }\n    } catch (e) {\n      console.log(\"err position\", e);\n      dispatch(fetchPositionFailed());\n    }\n  };\n};\nexport const fetchRoleStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"ROLE\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchRoleSuccess(res.data));\n      } else {\n        dispatch(fetchRoleFailed());\n      }\n    } catch (e) {\n      console.log(\"err role\", e);\n      dispatch(fetchRoleFailed());\n    }\n  };\n};\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserService(data);\n\n      if (res && res.err === 0) {\n        dispatch(saveUserSuccess());\n        toast.success(\"Create a new User Success\");\n        dispatch(fetchAllUsersStart());\n      } else {\n        dispatch(saveUserFailed());\n      }\n    } catch (e) {\n      dispatch(saveUserFailed());\n      console.log(\"err create user\", e);\n    }\n  };\n};\nexport const saveUserSuccess = () => ({\n  type: actionTypes.CREATE_USER_SUCCESS\n});\nexport const saveUserFailed = () => ({\n  type: actionTypes.CREATE_USER_FAILED\n});\nexport const fetchAllUsersStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllUsers(\"All\");\n\n      if (res && res.err === 0) {\n        dispatch(fetchAllUsersSuccess(res.users.reverse()));\n      } else {\n        dispatch(fetchAllUsersFailed());\n        toast.error(\" Fetch all User error!\");\n      }\n    } catch (e) {\n      console.log(\"fetchAllUsersFailed\", e);\n      toast.error(\" Fetch all User error!\");\n      dispatch(fetchAllUsersFailed());\n    }\n  };\n};\nexport const fetchAllUsersSuccess = data => ({\n  type: actionTypes.FETCH_ALL_USER_SUCCESS,\n  users: data\n});\nexport const fetchAllUsersFailed = () => ({\n  type: actionTypes.FETCH_ALL_USER_FAILED\n});\nexport const DeleteUsersStart = userId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteUserService(userId);\n\n      if (res && res.err === 0) {\n        dispatch(DeleteUsersSuccess());\n        dispatch(fetchAllUsersStart());\n        toast.success(\"Delete a User Success\");\n      } else {\n        toast.error(\"Delete a User error!\");\n        dispatch(DeleteUsersFailed());\n      }\n    } catch (e) {\n      console.log(\"DeleteUsersFailed\", e);\n      dispatch(DeleteUsersFailed());\n    }\n  };\n};\n_c = DeleteUsersStart;\nexport const DeleteUsersSuccess = () => ({\n  type: actionTypes.DELETE_USER_SUCCESS\n});\n_c2 = DeleteUsersSuccess;\nexport const DeleteUsersFailed = () => ({\n  type: actionTypes.DELETE_USER_FAILED\n});\n_c3 = DeleteUsersFailed;\nexport const editAUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editUserService(data);\n\n      if (res && res.err === 0) {\n        dispatch(editUsersSuccess());\n        dispatch(fetchAllUsersStart());\n        toast.success(\"Update User Success\");\n      } else {\n        toast.error(\"Update User error!\");\n        dispatch(editUsersFailed());\n      }\n    } catch (e) {\n      console.log(\"Update Users Failed\", e);\n      dispatch(editUsersFailed());\n    }\n  };\n};\nexport const editUsersSuccess = () => ({\n  type: actionTypes.EDIT_USER_SUCCESS\n});\nexport const editUsersFailed = () => ({\n  type: actionTypes.EDIT_USER_FAILED\n});\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DeleteUsersStart\");\n$RefreshReg$(_c2, \"DeleteUsersSuccess\");\n$RefreshReg$(_c3, \"DeleteUsersFailed\");","map":{"version":3,"sources":["C:/Users/anlnd/Documents/GitHub/BookingDoctor/reactFE/src/store/actions/adminActions.js"],"names":["actionTypes","getAllCodeService","createNewUserService","getAllUsers","editUserService","deleteUserService","getTopDoctorHomeService","getAllDoctors","saveDetailDoctorService","getAllSpecialty","getAllClinic","toast","fetchAllScheduleTime","dispatch","getState","res","errCode","type","SAVE_ALL_SCHEDULE_TIME_SUCCESS","dataTime","data","SAVE_ALL_SCHEDULE_TIME_FAILED","console","log","e","saveDetailDoctor","SAVE_DETAIL_DOCTOR_SUCCESS","success","SAVE_DETAIL_DOCTOR_FAILED","error","fetchTopDoctor","FETCH_TOP_DOCTOR_SUCCESS","dataDoctor","FETCH_TOP_DOCTOR_FAILED","fetchTopDoctorSuccess","fetchTopDoctorFailed","fetchAllDoctors","err","FETCH_ALL_DOCTOR_SUCCESS","dataDoctors","FETCH_ALL_DOCTOR_FAILED","fetchGenderStart","FETCH_GENDER_START","fetchGenderSuccess","fetchGenderFailed","genderData","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAILED","getRequiredDoctorInfo","FETCH_REQUIRED_DOCTOR_INFO_START","resPrice","resPayment","resProvince","resSpecialty","resClinic","fetchRequiredDoctorInfoSuccess","fetchRequiredDoctorInfoFailed","allRequiredData","FETCH_REQUIRED_DOCTOR_INFO_SUCCESS","FETCH_REQUIRED_DOCTOR_INFO_FAILED","fetchPositionSuccess","positionData","FETCH_POSITION_SUCCESS","fetchPositionFailed","FETCH_POSITION_FAILED","fetchRoleSuccess","roleData","FETCH_ROLE_SUCCESS","fetchRoleFailed","FETCH_ROLE_FAILED","fetchPositionStart","fetchRoleStart","createNewUser","saveUserSuccess","fetchAllUsersStart","saveUserFailed","CREATE_USER_SUCCESS","CREATE_USER_FAILED","fetchAllUsersSuccess","users","reverse","fetchAllUsersFailed","FETCH_ALL_USER_SUCCESS","FETCH_ALL_USER_FAILED","DeleteUsersStart","userId","DeleteUsersSuccess","DeleteUsersFailed","DELETE_USER_SUCCESS","DELETE_USER_FAILED","editAUser","editUsersSuccess","editUsersFailed","EDIT_USER_SUCCESS","EDIT_USER_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from \"./actionTypes\";\r\nimport {\r\n  getAllCodeService,\r\n  createNewUserService,\r\n  getAllUsers,\r\n  editUserService,\r\n  deleteUserService,\r\n  getTopDoctorHomeService,\r\n  getAllDoctors,\r\n  saveDetailDoctorService,\r\n  getAllSpecialty,\r\n  getAllClinic,\r\n} from \"../../services/userService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// export const fetchGenderStart = () => ({\r\n//   type: actionTypes.FETCH_GENDER_START,\r\n// });\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllCodeService(\"TIME\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.SAVE_ALL_SCHEDULE_TIME_SUCCESS,\r\n          dataTime: res.data,\r\n        });\r\n      } else {\r\n        dispatch({ type: actionTypes.SAVE_ALL_SCHEDULE_TIME_FAILED });\r\n        console.log(\"SAVE_ALL_SCHEDULE_TIME_FAILED\");\r\n      }\r\n    } catch (e) {\r\n      console.log(\"SAVE_ALL_SCHEDULE_TIME_FAILED\", e);\r\n      dispatch({ type: actionTypes.SAVE_ALL_SCHEDULE_TIME_FAILED });\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveDetailDoctor = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await saveDetailDoctorService(data);\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS,\r\n        });\r\n        toast.success(\"Save Info Doctor Success\");\r\n      } else {\r\n        dispatch({ type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED });\r\n        toast.error(\"SAVE_ALL_SCHEDULE_TIME__FAILED\");\r\n      }\r\n    } catch (e) {\r\n      console.log(\"fetchTopDoctorFailed\", e);\r\n      dispatch({ type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED });\r\n      toast.error(\"SAVE_ALL_SCHEDULE_TIME__FAILED\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchTopDoctor = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getTopDoctorHomeService(\"\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\r\n          dataDoctor: res.data,\r\n        });\r\n      } else {\r\n        dispatch({ type: actionTypes.FETCH_TOP_DOCTOR_FAILED });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"fetchTopDoctorFailed\", e);\r\n      dispatch({ type: actionTypes.FETCH_TOP_DOCTOR_FAILED });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchTopDoctorSuccess = () => ({\r\n  type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\r\n});\r\nexport const fetchTopDoctorFailed = () => ({\r\n  type: actionTypes.FETCH_TOP_DOCTOR_FAILED,\r\n});\r\n\r\nexport const fetchAllDoctors = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllDoctors();\r\n      if (res && res.err === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\r\n          dataDoctors: res.data,\r\n        });\r\n      } else {\r\n        dispatch({ type: actionTypes.FETCH_ALL_DOCTOR_FAILED });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"fetchALLDoctorFailed\", e);\r\n      dispatch({ type: actionTypes.FETCH_ALL_DOCTOR_FAILED });\r\n    }\r\n  };\r\n};\r\n//Gender\r\nexport const fetchGenderStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: actionTypes.FETCH_GENDER_START });\r\n      let res = await getAllCodeService(\"GENDER\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchGenderSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchGenderFailed());\r\n      }\r\n    } catch (e) {\r\n      console.log(\"err gender\", e);\r\n      dispatch(fetchGenderFailed());\r\n    }\r\n  };\r\n};\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n  type: actionTypes.FETCH_GENDER_SUCCESS,\r\n  data: genderData,\r\n});\r\nexport const fetchGenderFailed = () => ({\r\n  type: actionTypes.FETCH_GENDER_FAILED,\r\n});\r\n\r\nexport const getRequiredDoctorInfo = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_START });\r\n      let resPrice = await getAllCodeService(\"PRICE\");\r\n      let resPayment = await getAllCodeService(\"PAYMENT\");\r\n      let resProvince = await getAllCodeService(\"PROVINCE\");\r\n      let resSpecialty = await getAllSpecialty();\r\n      let resClinic = await getAllClinic();\r\n      if (\r\n        resPrice &&\r\n        resPrice.errCode === 0 &&\r\n        resPayment &&\r\n        resPayment.errCode === 0 &&\r\n        resProvince &&\r\n        resProvince.errCode === 0 &&\r\n        resSpecialty &&\r\n        resSpecialty.errCode === 0 &&\r\n        resClinic &&\r\n        resClinic.errCode === 0\r\n      ) {\r\n        let data = {\r\n          resPrice: resPrice.data,\r\n          resPayment: resPayment.data,\r\n          resProvince: resProvince.data,\r\n          resSpecialty: resSpecialty.data,\r\n          resClinic: resClinic.data,\r\n        };\r\n        dispatch(fetchRequiredDoctorInfoSuccess(data));\r\n      } else {\r\n        dispatch(fetchRequiredDoctorInfoFailed());\r\n      }\r\n    } catch (e) {\r\n      console.log(\"err gender\", e);\r\n      dispatch(fetchRequiredDoctorInfoFailed());\r\n    }\r\n  };\r\n};\r\nexport const fetchRequiredDoctorInfoSuccess = (allRequiredData) => ({\r\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_SUCCESS,\r\n  data: allRequiredData,\r\n});\r\nexport const fetchRequiredDoctorInfoFailed = () => ({\r\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_FAILED,\r\n});\r\n\r\n//Position\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n  type: actionTypes.FETCH_POSITION_SUCCESS,\r\n  data: positionData,\r\n});\r\nexport const fetchPositionFailed = () => ({\r\n  type: actionTypes.FETCH_POSITION_FAILED,\r\n});\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n  type: actionTypes.FETCH_ROLE_SUCCESS,\r\n  data: roleData,\r\n});\r\nexport const fetchRoleFailed = () => ({\r\n  type: actionTypes.FETCH_ROLE_FAILED,\r\n});\r\n\r\nexport const fetchPositionStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllCodeService(\"POSITION\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchPositionSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchPositionFailed());\r\n      }\r\n    } catch (e) {\r\n      console.log(\"err position\", e);\r\n      dispatch(fetchPositionFailed());\r\n    }\r\n  };\r\n};\r\nexport const fetchRoleStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllCodeService(\"ROLE\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchRoleSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchRoleFailed());\r\n      }\r\n    } catch (e) {\r\n      console.log(\"err role\", e);\r\n      dispatch(fetchRoleFailed());\r\n    }\r\n  };\r\n};\r\n\r\nexport const createNewUser = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await createNewUserService(data);\r\n      if (res && res.err === 0) {\r\n        dispatch(saveUserSuccess());\r\n        toast.success(\"Create a new User Success\");\r\n        dispatch(fetchAllUsersStart());\r\n      } else {\r\n        dispatch(saveUserFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(saveUserFailed());\r\n      console.log(\"err create user\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveUserSuccess = () => ({\r\n  type: actionTypes.CREATE_USER_SUCCESS,\r\n});\r\nexport const saveUserFailed = () => ({\r\n  type: actionTypes.CREATE_USER_FAILED,\r\n});\r\n\r\nexport const fetchAllUsersStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllUsers(\"All\");\r\n      if (res && res.err === 0) {\r\n        dispatch(fetchAllUsersSuccess(res.users.reverse()));\r\n      } else {\r\n        dispatch(fetchAllUsersFailed());\r\n        toast.error(\" Fetch all User error!\");\r\n      }\r\n    } catch (e) {\r\n      console.log(\"fetchAllUsersFailed\", e);\r\n      toast.error(\" Fetch all User error!\");\r\n      dispatch(fetchAllUsersFailed());\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllUsersSuccess = (data) => ({\r\n  type: actionTypes.FETCH_ALL_USER_SUCCESS,\r\n  users: data,\r\n});\r\nexport const fetchAllUsersFailed = () => ({\r\n  type: actionTypes.FETCH_ALL_USER_FAILED,\r\n});\r\n\r\nexport const DeleteUsersStart = (userId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await deleteUserService(userId);\r\n      if (res && res.err === 0) {\r\n        dispatch(DeleteUsersSuccess());\r\n        dispatch(fetchAllUsersStart());\r\n        toast.success(\"Delete a User Success\");\r\n      } else {\r\n        toast.error(\"Delete a User error!\");\r\n        dispatch(DeleteUsersFailed());\r\n      }\r\n    } catch (e) {\r\n      console.log(\"DeleteUsersFailed\", e);\r\n      dispatch(DeleteUsersFailed());\r\n    }\r\n  };\r\n};\r\n\r\nexport const DeleteUsersSuccess = () => ({\r\n  type: actionTypes.DELETE_USER_SUCCESS,\r\n});\r\nexport const DeleteUsersFailed = () => ({\r\n  type: actionTypes.DELETE_USER_FAILED,\r\n});\r\n\r\nexport const editAUser = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await editUserService(data);\r\n\r\n      if (res && res.err === 0) {\r\n        dispatch(editUsersSuccess());\r\n        dispatch(fetchAllUsersStart());\r\n        toast.success(\"Update User Success\");\r\n      } else {\r\n        toast.error(\"Update User error!\");\r\n        dispatch(editUsersFailed());\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Update Users Failed\", e);\r\n      dispatch(editUsersFailed());\r\n    }\r\n  };\r\n};\r\n\r\nexport const editUsersSuccess = () => ({\r\n  type: actionTypes.EDIT_USER_SUCCESS,\r\n});\r\nexport const editUsersFailed = () => ({\r\n  type: actionTypes.EDIT_USER_FAILED,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}