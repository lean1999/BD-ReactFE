{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anlnd\\\\Documents\\\\GitHub\\\\BookingDoctor\\\\reactFE\\\\src\\\\components\\\\Input\\\\DatePicker.js\";\nimport React, { Component } from \"react\";\nimport Flatpickr from \"react-flatpickr\";\nimport moment from \"moment\";\nimport { KeyCodeUtils } from \"../../utils\";\nimport \"./DatePicker.scss\"; // const CustomInput = ({ value, defaultValue, inputRef, onInputChange, onInputBlur, ...props }) => {\n//     return <input {...props} className='custom-form-control custom-date-input' defaultValue={defaultValue} ref={inputRef}\n//         onChange={onInputChange}\n//         onBlur={onInputBlur}\n//     />;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DatePicker extends Component {\n  constructor(...args) {\n    super(...args);\n    this.flatpickrNode = null;\n\n    this.nodeRef = element => {\n      this.flatpickr = element && element.flatpickr;\n      this.flatpickrNode = element && element.node;\n\n      if (this.flatpickrNode) {\n        this.flatpickrNode.addEventListener(\"blur\", this.handleBlur);\n        this.flatpickrNode.addEventListener(\"keydown\", this.handlerKeyDown);\n      }\n    };\n\n    this.handlerKeyDown = event => {\n      const keyCode = event.which || event.keyCode;\n\n      if (keyCode === KeyCodeUtils.ENTER) {\n        event.preventDefault();\n        const {\n          onChange\n        } = this.props;\n        const value = event.target.value; // Take the blur event and process the string value\n\n        const valueMoment = moment(value, \"DD/MM/YYYY\");\n        onChange([valueMoment.toDate(), valueMoment.toDate()]);\n      }\n    };\n\n    this.handleBlur = event => {\n      const {\n        onChange\n      } = this.props;\n      const value = event.target.value; // Take the blur event and process the string value\n\n      event.preventDefault();\n      const valueMoment = moment(value, \"DD/MM/YYYY\");\n      onChange([valueMoment.toDate(), valueMoment.toDate()]);\n    };\n\n    this.onOpen = () => {\n      if (this.flatpickrNode) {\n        this.flatpickrNode.blur();\n      }\n    };\n\n    this.disableDates = () => {\n      var today, dd, mm, yyyy;\n      today = new Date();\n      dd = today.getDate() + 1;\n      mm = today.getMonth() + 1;\n      yyyy = today.getFullYear();\n      return yyyy + \"-\" + mm + \"-\" + dd;\n    };\n\n    this.checkDateValue = (str, max) => {\n      if (str.charAt(0) !== \"0\" || str === \"00\") {\n        var num = parseInt(str);\n        if (isNaN(num) || num <= 0 || num > max) num = 1;\n        str = num > parseInt(max.toString().charAt(0)) && num.toString().length === 1 ? \"0\" + num : num.toString();\n      }\n\n      return str;\n    };\n\n    this.autoFormatOnChange = (value, seperator) => {\n      var input = value;\n      let regexForDeleting = new RegExp(`\\\\D\\\\${seperator}$`); //if (/\\D\\/$/.test(input)) input = input.substr(0, input.length - 3); // dat.nt: Xóa thêm 1 ký tự nếu xóa dấu cách sau / (VD: 12 / 12 /=> 12 / 1)\n\n      if (regexForDeleting.test(input)) input = input.substr(0, input.length - 3);\n      var values = input.split(seperator).map(function (v) {\n        return v.replace(/\\D/g, \"\");\n      });\n      if (values[0]) values[0] = this.checkDateValue(values[0], 31);\n      if (values[1]) values[1] = this.checkDateValue(values[1], 12);\n      var output = values.map(function (v, i) {\n        return v.length === 2 && i < 2 ? v + \" \" + seperator + \" \" : v;\n      });\n      return output.join(\"\").substr(0, 14);\n    };\n\n    this.onInputChange = e => {\n      if (this.DISPLAY_FORMAT === this.DATE_FORMAT_AUTO_FILL) {\n        let converted = this.autoFormatOnChange(e.target.value, this.SEPERATOR);\n        e.target.value = converted;\n      }\n    };\n\n    this.onInputBlur = e => {};\n\n    this.SEPERATOR = \"/\";\n    this.DATE_FORMAT_AUTO_FILL = \"d/m/Y\";\n    this.DISPLAY_FORMAT = \"d/m/Y\";\n  }\n\n  componentWillUnmount() {\n    if (this.flatpickrNode) {\n      this.flatpickrNode.removeEventListener(\"blur\", this.handleBlur);\n      this.flatpickrNode.removeEventListener(\"keydown\", this.handlerKeyDown);\n    }\n  }\n\n  close() {\n    this.flatpickr.close();\n  }\n\n  render() {\n    const {\n      value,\n      onChange,\n      minDate,\n      onClose,\n      maxDate,\n      ...otherProps\n    } = this.props;\n    const options = {\n      dateFormat: this.DISPLAY_FORMAT,\n      allowInput: true,\n      disableMobile: true,\n      onClose: onClose,\n      onOpen: this.onOpen\n    };\n\n    if (minDate) {\n      options.minDate = minDate;\n    }\n\n    if (maxDate) {\n      options.maxDate = maxDate;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Flatpickr, {\n      ref: this.nodeRef,\n      value: value,\n      onChange: onChange,\n      options: options // render={\n      //     ({ defaultValue, value, ...props }, ref) => {\n      //         return <CustomInput defaultValue={defaultValue} inputRef={ref} onInputChange={this.onInputChange} onInputBlur={this.onInputBlur} />\n      //     }\n      // }\n      ,\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DatePicker;","map":{"version":3,"sources":["C:/Users/anlnd/Documents/GitHub/BookingDoctor/reactFE/src/components/Input/DatePicker.js"],"names":["React","Component","Flatpickr","moment","KeyCodeUtils","DatePicker","flatpickrNode","nodeRef","element","flatpickr","node","addEventListener","handleBlur","handlerKeyDown","event","keyCode","which","ENTER","preventDefault","onChange","props","value","target","valueMoment","toDate","onOpen","blur","disableDates","today","dd","mm","yyyy","Date","getDate","getMonth","getFullYear","checkDateValue","str","max","charAt","num","parseInt","isNaN","toString","length","autoFormatOnChange","seperator","input","regexForDeleting","RegExp","test","substr","values","split","map","v","replace","output","i","join","onInputChange","e","DISPLAY_FORMAT","DATE_FORMAT_AUTO_FILL","converted","SEPERATOR","onInputBlur","componentWillUnmount","removeEventListener","close","render","minDate","onClose","maxDate","otherProps","options","dateFormat","allowInput","disableMobile"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport moment from \"moment\";\r\n\r\nimport { KeyCodeUtils } from \"../../utils\";\r\nimport \"./DatePicker.scss\";\r\n\r\n// const CustomInput = ({ value, defaultValue, inputRef, onInputChange, onInputBlur, ...props }) => {\r\n//     return <input {...props} className='custom-form-control custom-date-input' defaultValue={defaultValue} ref={inputRef}\r\n//         onChange={onInputChange}\r\n//         onBlur={onInputBlur}\r\n//     />;\r\n// };\r\n\r\nclass DatePicker extends Component {\r\n  flatpickrNode = null;\r\n\r\n  nodeRef = (element) => {\r\n    this.flatpickr = element && element.flatpickr;\r\n    this.flatpickrNode = element && element.node;\r\n    if (this.flatpickrNode) {\r\n      this.flatpickrNode.addEventListener(\"blur\", this.handleBlur);\r\n      this.flatpickrNode.addEventListener(\"keydown\", this.handlerKeyDown);\r\n    }\r\n  };\r\n\r\n  handlerKeyDown = (event) => {\r\n    const keyCode = event.which || event.keyCode;\r\n    if (keyCode === KeyCodeUtils.ENTER) {\r\n      event.preventDefault();\r\n      const { onChange } = this.props;\r\n      const value = event.target.value;\r\n\r\n      // Take the blur event and process the string value\r\n      const valueMoment = moment(value, \"DD/MM/YYYY\");\r\n      onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (this.flatpickrNode) {\r\n      this.flatpickrNode.removeEventListener(\"blur\", this.handleBlur);\r\n      this.flatpickrNode.removeEventListener(\"keydown\", this.handlerKeyDown);\r\n    }\r\n  }\r\n\r\n  handleBlur = (event) => {\r\n    const { onChange } = this.props;\r\n    const value = event.target.value;\r\n\r\n    // Take the blur event and process the string value\r\n    event.preventDefault();\r\n    const valueMoment = moment(value, \"DD/MM/YYYY\");\r\n    onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n  };\r\n\r\n  onOpen = () => {\r\n    if (this.flatpickrNode) {\r\n      this.flatpickrNode.blur();\r\n    }\r\n  };\r\n  disableDates = () => {\r\n    var today, dd, mm, yyyy;\r\n    today = new Date();\r\n    dd = today.getDate() + 1;\r\n    mm = today.getMonth() + 1;\r\n    yyyy = today.getFullYear();\r\n    return yyyy + \"-\" + mm + \"-\" + dd;\r\n  };\r\n  close() {\r\n    this.flatpickr.close();\r\n  }\r\n\r\n  checkDateValue = (str, max) => {\r\n    if (str.charAt(0) !== \"0\" || str === \"00\") {\r\n      var num = parseInt(str);\r\n      if (isNaN(num) || num <= 0 || num > max) num = 1;\r\n      str =\r\n        num > parseInt(max.toString().charAt(0)) && num.toString().length === 1\r\n          ? \"0\" + num\r\n          : num.toString();\r\n    }\r\n    return str;\r\n  };\r\n\r\n  // autoFormatonBlur = (value) => {\r\n  //     var input = value;\r\n  //     var values = input.split('/').map(function (v, i) {\r\n  //         return v.replace(/\\D/g, '')\r\n  //     });\r\n  //     var output = '';\r\n\r\n  //     if (values.length == 3) {\r\n  //         var year = values[2].length !== 4 ? parseInt(values[2]) + 2000 : parseInt(values[2]);\r\n  //         var month = parseInt(values[0]) - 1;\r\n  //         var day = parseInt(values[1]);\r\n  //         var d = new Date(year, month, day);\r\n  //         if (!isNaN(d)) {\r\n  //             //document.getElementById('result').innerText = d.toString();\r\n  //             var dates = [d.getMonth() + 1, d.getDate(), d.getFullYear()];\r\n  //             output = dates.map(function (v) {\r\n  //                 v = v.toString();\r\n  //                 return v.length == 1 ? '0' + v : v;\r\n  //             }).join(' / ');\r\n  //         };\r\n  //     };\r\n  //     // this.value = output;\r\n  //     return output;\r\n  // }\r\n\r\n  autoFormatOnChange = (value, seperator) => {\r\n    var input = value;\r\n\r\n    let regexForDeleting = new RegExp(`\\\\D\\\\${seperator}$`);\r\n\r\n    //if (/\\D\\/$/.test(input)) input = input.substr(0, input.length - 3); // dat.nt: Xóa thêm 1 ký tự nếu xóa dấu cách sau / (VD: 12 / 12 /=> 12 / 1)\r\n\r\n    if (regexForDeleting.test(input)) input = input.substr(0, input.length - 3);\r\n\r\n    var values = input.split(seperator).map(function (v) {\r\n      return v.replace(/\\D/g, \"\");\r\n    });\r\n\r\n    if (values[0]) values[0] = this.checkDateValue(values[0], 31);\r\n    if (values[1]) values[1] = this.checkDateValue(values[1], 12);\r\n    var output = values.map(function (v, i) {\r\n      return v.length === 2 && i < 2 ? v + \" \" + seperator + \" \" : v;\r\n    });\r\n    return output.join(\"\").substr(0, 14);\r\n  };\r\n\r\n  onInputChange = (e) => {\r\n    if (this.DISPLAY_FORMAT === this.DATE_FORMAT_AUTO_FILL) {\r\n      let converted = this.autoFormatOnChange(e.target.value, this.SEPERATOR);\r\n      e.target.value = converted;\r\n    }\r\n  };\r\n\r\n  onInputBlur = (e) => {};\r\n\r\n  //dat.nt : Auto Fill cho dạng ngăn cách và format cụ thể (seperator có thể dc thay thế)\r\n  SEPERATOR = \"/\";\r\n  DATE_FORMAT_AUTO_FILL = \"d/m/Y\"; // Format không thay đổi\r\n\r\n  // dat.nt : Format ngày hiển thị\r\n  DISPLAY_FORMAT = \"d/m/Y\";\r\n\r\n  render() {\r\n    const { value, onChange, minDate, onClose, maxDate, ...otherProps } =\r\n      this.props;\r\n    const options = {\r\n      dateFormat: this.DISPLAY_FORMAT,\r\n      allowInput: true,\r\n      disableMobile: true,\r\n      onClose: onClose,\r\n      onOpen: this.onOpen,\r\n    };\r\n    if (minDate) {\r\n      options.minDate = minDate;\r\n    }\r\n    if (maxDate) {\r\n      options.maxDate = maxDate;\r\n    }\r\n    return (\r\n      <Flatpickr\r\n        ref={this.nodeRef}\r\n        value={value}\r\n        onChange={onChange}\r\n        options={options}\r\n        // render={\r\n        //     ({ defaultValue, value, ...props }, ref) => {\r\n        //         return <CustomInput defaultValue={defaultValue} inputRef={ref} onInputChange={this.onInputChange} onInputBlur={this.onInputBlur} />\r\n        //     }\r\n        // }\r\n        {...otherProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DatePicker;\r\n"]},"metadata":{},"sourceType":"module"}