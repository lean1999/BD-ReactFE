{"ast":null,"code":"// import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\n// import { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\n// const locationHelper = locationHelperBuilder({});\n// export const userIsAuthenticated = connectedRouterRedirect({\n//   authenticatedSelector: (state) => state.user.isLoggedIn,\n//   wrapperDisplayName: \"UserIsAuthenticated\",\n//   redirectPath: \"/login\",\n// });\n// export const userIsNotAuthenticated = connectedRouterRedirect({\n//   // Want to redirect the user when they are authenticated\n//   authenticatedSelector: (state) => !state.user.isLoggedIn,\n//   wrapperDisplayName: \"UserIsNotAuthenticated\",\n//   redirectPath: (state, ownProps) =>\n//     locationHelper.getRedirectQueryParam(ownProps) || \"/\",\n//   allowRedirectBack: false,\n// });\nimport locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\nconst locationHelper = locationHelperBuilder({});\nexport const userIsAuthenticated = connectedRouterRedirect({\n  authenticatedSelector: state => state.user.isLoggedIn,\n  wrapperDisplayName: \"UserIsAuthenticated\",\n  redirectPath: \"/\" // redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/login',\n\n});\nexport const userIsNotAuthenticated = connectedRouterRedirect({\n  // Want to redirect the user when they are authenticated\n  authenticatedSelector: state => !state.user.isLoggedIn,\n  wrapperDisplayName: \"UserIsNotAuthenticated\",\n  // link khi ddawng nhap zo he thong\n  // redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/system',\n  // moi\n  redirectPath: \"/admin\",\n  allowRedirectBack: false\n});","map":{"version":3,"sources":["C:/Users/anlnd/Documents/GitHub/BookingDoctor/reactFE/src/hoc/authentication.js"],"names":["locationHelperBuilder","connectedRouterRedirect","locationHelper","userIsAuthenticated","authenticatedSelector","state","user","isLoggedIn","wrapperDisplayName","redirectPath","userIsNotAuthenticated","allowRedirectBack"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,qBAAP,MAAkC,4CAAlC;AACA,SAASC,uBAAT,QAAwC,sCAAxC;AAEA,MAAMC,cAAc,GAAGF,qBAAqB,CAAC,EAAD,CAA5C;AAEA,OAAO,MAAMG,mBAAmB,GAAGF,uBAAuB,CAAC;AACzDG,EAAAA,qBAAqB,EAAGC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,UADY;AAEzDC,EAAAA,kBAAkB,EAAE,qBAFqC;AAGzDC,EAAAA,YAAY,EAAE,GAH2C,CAIzD;;AAJyD,CAAD,CAAnD;AAOP,OAAO,MAAMC,sBAAsB,GAAGT,uBAAuB,CAAC;AAC5D;AACAG,EAAAA,qBAAqB,EAAGC,KAAD,IAAW,CAACA,KAAK,CAACC,IAAN,CAAWC,UAFc;AAG5DC,EAAAA,kBAAkB,EAAE,wBAHwC;AAI5D;AACA;AACA;AACAC,EAAAA,YAAY,EAAE,QAP8C;AAQ5DE,EAAAA,iBAAiB,EAAE;AARyC,CAAD,CAAtD","sourcesContent":["// import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\r\n// import { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\r\n\r\n// const locationHelper = locationHelperBuilder({});\r\n\r\n// export const userIsAuthenticated = connectedRouterRedirect({\r\n//   authenticatedSelector: (state) => state.user.isLoggedIn,\r\n//   wrapperDisplayName: \"UserIsAuthenticated\",\r\n//   redirectPath: \"/login\",\r\n// });\r\n\r\n// export const userIsNotAuthenticated = connectedRouterRedirect({\r\n//   // Want to redirect the user when they are authenticated\r\n//   authenticatedSelector: (state) => !state.user.isLoggedIn,\r\n//   wrapperDisplayName: \"UserIsNotAuthenticated\",\r\n//   redirectPath: (state, ownProps) =>\r\n//     locationHelper.getRedirectQueryParam(ownProps) || \"/\",\r\n//   allowRedirectBack: false,\r\n// });\r\n\r\nimport locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\r\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\r\n\r\nconst locationHelper = locationHelperBuilder({});\r\n\r\nexport const userIsAuthenticated = connectedRouterRedirect({\r\n  authenticatedSelector: (state) => state.user.isLoggedIn,\r\n  wrapperDisplayName: \"UserIsAuthenticated\",\r\n  redirectPath: \"/\",\r\n  // redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/login',\r\n});\r\n\r\nexport const userIsNotAuthenticated = connectedRouterRedirect({\r\n  // Want to redirect the user when they are authenticated\r\n  authenticatedSelector: (state) => !state.user.isLoggedIn,\r\n  wrapperDisplayName: \"UserIsNotAuthenticated\",\r\n  // link khi ddawng nhap zo he thong\r\n  // redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/system',\r\n  // moi\r\n  redirectPath: \"/admin\",\r\n  allowRedirectBack: false,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}